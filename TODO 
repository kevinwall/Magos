Algumas classes necessárias:

GameManager : Irá gerenciar todas as classes , tendo obejto do tipo BuildMaze, SolveMaze.Nele , é necessário repassar um ponteiro para os objetos das demais classes 

Render : Receberá as saídas do Maze, utilizará o Canvas como auxiliar para renderizar o labirinto e criar as imagens.Também receberá as dimensões do labirinto 

Maze : Será o labirinto pós usado as classes de building, solução e caminhos percorridos no labirinto

BuildMaze : quebra do labirinto.O build só terminará quando uma célula qualquer do labirinto está conectado a outra célula arbitrária.
Pode-se Utilizar o hash tables para corresponder cada célula , e uma lista para guardar esses hashs(células),assim o build terminará quando haver apenas um hash table  

SolveMaze: trilha o labirinto, utiliza-se as IA nesta classe . Marca a célula como visitado ,parte do caminho , descartada

**O que mantem numa célula : Não visitada ; Visitada ; Parte do caminho ; observar as células vizinhas pra saber qual cor pintar na borda
-Pode ser usando manipulação de bit :
 unsigned char Maze [40 * 66];
 for( int i = 0 ; i < (40 * 66) ; i++)
 	Maze[ i ] = TopWall | RightWall | LeftWall | BottomWall;

-Para derrubar a parede :
	Maze[13] == Maze [13] & ~BottomWall

-Identificando as células :

enum cell_e : unsigned char { topwall = 0x01, rightwall = 0x02 , bottomwall = 0x04 , leftwall = 0x08 }
